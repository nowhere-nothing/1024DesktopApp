// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package model

import (
	"context"
	"database/sql"
)

const createBatchImageItem = `-- name: CreateBatchImageItem :execresult

INSERT INTO img_item_pv (ref_item, data)
VALUES (?, ?)
`

type CreateBatchImageItemParams struct {
	RefItem int64          `db:"ref_item"`
	Data    sql.NullString `db:"data"`
}

// 不支持mysql 批量插入
// INSERT INTO img_item (info_ref, data)
// VALUES ();
func (q *Queries) CreateBatchImageItem(ctx context.Context, arg CreateBatchImageItemParams) (sql.Result, error) {
	return q.exec(ctx, q.createBatchImageItemStmt, createBatchImageItem, arg.RefItem, arg.Data)
}

const createImageItem = `-- name: CreateImageItem :execlastid
INSERT INTO img_item (ref_meta, hash, data, content_type, url)
VALUES (?, ?, ?, ?, ?)
`

type CreateImageItemParams struct {
	RefMeta     int64  `db:"ref_meta"`
	Hash        string `db:"hash"`
	Data        []byte `db:"data"`
	ContentType string `db:"content_type"`
	Url         string `db:"url"`
}

func (q *Queries) CreateImageItem(ctx context.Context, arg CreateImageItemParams) (int64, error) {
	result, err := q.exec(ctx, q.createImageItemStmt, createImageItem,
		arg.RefMeta,
		arg.Hash,
		arg.Data,
		arg.ContentType,
		arg.Url,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const createImageItemFailed = `-- name: CreateImageItemFailed :execlastid
INSERT INTO img_item_failed (ref_meta, hash, failed_url)
VALUES (?, ?, ?)
`

type CreateImageItemFailedParams struct {
	RefMeta   int64  `db:"ref_meta"`
	Hash      string `db:"hash"`
	FailedUrl string `db:"failed_url"`
}

func (q *Queries) CreateImageItemFailed(ctx context.Context, arg CreateImageItemFailedParams) (int64, error) {
	result, err := q.exec(ctx, q.createImageItemFailedStmt, createImageItemFailed, arg.RefMeta, arg.Hash, arg.FailedUrl)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const createImageSetMeta = `-- name: CreateImageSetMeta :execlastid
INSERT INTO img_set_meta (hash, title, origin_url)
VALUES (?, ?, ?)
`

type CreateImageSetMetaParams struct {
	Hash      string `db:"hash"`
	Title     string `db:"title"`
	OriginUrl string `db:"origin_url"`
}

func (q *Queries) CreateImageSetMeta(ctx context.Context, arg CreateImageSetMetaParams) (int64, error) {
	result, err := q.exec(ctx, q.createImageSetMetaStmt, createImageSetMeta, arg.Hash, arg.Title, arg.OriginUrl)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getImageFailedByHash = `-- name: GetImageFailedByHash :one
SELECT id
FROM img_item_failed
WHERE hash = ?
`

func (q *Queries) GetImageFailedByHash(ctx context.Context, hash string) (int64, error) {
	row := q.queryRow(ctx, q.getImageFailedByHashStmt, getImageFailedByHash, hash)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getImageItemByHash = `-- name: GetImageItemByHash :one
SELECT id
FROM img_item
WHERE hash = ?
`

func (q *Queries) GetImageItemByHash(ctx context.Context, hash string) (int64, error) {
	row := q.queryRow(ctx, q.getImageItemByHashStmt, getImageItemByHash, hash)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getImageSetMetaByHash = `-- name: GetImageSetMetaByHash :one
SELECT id
FROM img_set_meta
WHERE hash = ?
`

func (q *Queries) GetImageSetMetaByHash(ctx context.Context, hash string) (int64, error) {
	row := q.queryRow(ctx, q.getImageSetMetaByHashStmt, getImageSetMetaByHash, hash)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getImageSetMetaID = `-- name: GetImageSetMetaID :one
SELECT id
FROM img_set_meta
where title = ?
  and origin_url = ?
`

type GetImageSetMetaIDParams struct {
	Title     string `db:"title"`
	OriginUrl string `db:"origin_url"`
}

func (q *Queries) GetImageSetMetaID(ctx context.Context, arg GetImageSetMetaIDParams) (int64, error) {
	row := q.queryRow(ctx, q.getImageSetMetaIDStmt, getImageSetMetaID, arg.Title, arg.OriginUrl)
	var id int64
	err := row.Scan(&id)
	return id, err
}
