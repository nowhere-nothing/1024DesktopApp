// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2

package model

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createBatchImageItemStmt, err = db.PrepareContext(ctx, createBatchImageItem); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBatchImageItem: %w", err)
	}
	if q.createImageItemStmt, err = db.PrepareContext(ctx, createImageItem); err != nil {
		return nil, fmt.Errorf("error preparing query CreateImageItem: %w", err)
	}
	if q.createImageItemFailedStmt, err = db.PrepareContext(ctx, createImageItemFailed); err != nil {
		return nil, fmt.Errorf("error preparing query CreateImageItemFailed: %w", err)
	}
	if q.createImageSetMetaStmt, err = db.PrepareContext(ctx, createImageSetMeta); err != nil {
		return nil, fmt.Errorf("error preparing query CreateImageSetMeta: %w", err)
	}
	if q.getImageFailedByHashStmt, err = db.PrepareContext(ctx, getImageFailedByHash); err != nil {
		return nil, fmt.Errorf("error preparing query GetImageFailedByHash: %w", err)
	}
	if q.getImageItemByHashStmt, err = db.PrepareContext(ctx, getImageItemByHash); err != nil {
		return nil, fmt.Errorf("error preparing query GetImageItemByHash: %w", err)
	}
	if q.getImageSetMetaByHashStmt, err = db.PrepareContext(ctx, getImageSetMetaByHash); err != nil {
		return nil, fmt.Errorf("error preparing query GetImageSetMetaByHash: %w", err)
	}
	if q.getImageSetMetaIDStmt, err = db.PrepareContext(ctx, getImageSetMetaID); err != nil {
		return nil, fmt.Errorf("error preparing query GetImageSetMetaID: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createBatchImageItemStmt != nil {
		if cerr := q.createBatchImageItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBatchImageItemStmt: %w", cerr)
		}
	}
	if q.createImageItemStmt != nil {
		if cerr := q.createImageItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createImageItemStmt: %w", cerr)
		}
	}
	if q.createImageItemFailedStmt != nil {
		if cerr := q.createImageItemFailedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createImageItemFailedStmt: %w", cerr)
		}
	}
	if q.createImageSetMetaStmt != nil {
		if cerr := q.createImageSetMetaStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createImageSetMetaStmt: %w", cerr)
		}
	}
	if q.getImageFailedByHashStmt != nil {
		if cerr := q.getImageFailedByHashStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getImageFailedByHashStmt: %w", cerr)
		}
	}
	if q.getImageItemByHashStmt != nil {
		if cerr := q.getImageItemByHashStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getImageItemByHashStmt: %w", cerr)
		}
	}
	if q.getImageSetMetaByHashStmt != nil {
		if cerr := q.getImageSetMetaByHashStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getImageSetMetaByHashStmt: %w", cerr)
		}
	}
	if q.getImageSetMetaIDStmt != nil {
		if cerr := q.getImageSetMetaIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getImageSetMetaIDStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                        DBTX
	tx                        *sql.Tx
	createBatchImageItemStmt  *sql.Stmt
	createImageItemStmt       *sql.Stmt
	createImageItemFailedStmt *sql.Stmt
	createImageSetMetaStmt    *sql.Stmt
	getImageFailedByHashStmt  *sql.Stmt
	getImageItemByHashStmt    *sql.Stmt
	getImageSetMetaByHashStmt *sql.Stmt
	getImageSetMetaIDStmt     *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                        tx,
		tx:                        tx,
		createBatchImageItemStmt:  q.createBatchImageItemStmt,
		createImageItemStmt:       q.createImageItemStmt,
		createImageItemFailedStmt: q.createImageItemFailedStmt,
		createImageSetMetaStmt:    q.createImageSetMetaStmt,
		getImageFailedByHashStmt:  q.getImageFailedByHashStmt,
		getImageItemByHashStmt:    q.getImageItemByHashStmt,
		getImageSetMetaByHashStmt: q.getImageSetMetaByHashStmt,
		getImageSetMetaIDStmt:     q.getImageSetMetaIDStmt,
	}
}
